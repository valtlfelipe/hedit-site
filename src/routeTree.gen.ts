/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as HumanRouteImport } from './routes/human'
import { Route as DownloadRouteImport } from './routes/download'
import { Route as IndexRouteImport } from './routes/index'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const HumanRoute = HumanRouteImport.update({
  id: '/human',
  path: '/human',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadRoute = DownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/human': typeof HumanRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/human': typeof HumanRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/human': typeof HumanRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/download' | '/human' | '/pricing' | '/privacy' | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/download' | '/human' | '/pricing' | '/privacy' | '/terms'
  id:
    | '__root__'
    | '/'
    | '/download'
    | '/human'
    | '/pricing'
    | '/privacy'
    | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DownloadRoute: typeof DownloadRoute
  HumanRoute: typeof HumanRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/human': {
      id: '/human'
      path: '/human'
      fullPath: '/human'
      preLoaderRoute: typeof HumanRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DownloadRoute: DownloadRoute,
  HumanRoute: HumanRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
